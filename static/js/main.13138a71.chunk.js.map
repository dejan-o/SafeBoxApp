{"version":3,"sources":["components/panel-screen-status/Panel-screen-status.component.js","components/panel-screen-message/Panel-screen-message.component.js","components/panel-screen-message/utils.js","components/panel-screen/Panel-screen.component.js","redux/safeBoxLogic/logicTypes.js","redux/safeBoxLogic/logicActions.js","components/panel-button/Panel-button.component.js","components/panel-button/utils.js","constants.js","components/panel-buttons/utils.js","components/panel-buttons/Panel-buttons.component.js","components/serial-number/Serial-number.component.js","App.js","redux/safeBoxLogic/logicReducer.js","redux/screen/screenTypes.js","redux/screen/screenReducer.js","redux/rootReducer.js","redux/screen/screenActions.js","redux/safeBoxLogic/logicSagas.js","redux/rootSaga.js","redux/store.js","index.js"],"names":["connect","state","isLocked","logic","className","inputSequence","message","screen","sequence","length","substring","isActive","logicTypes","HANDLE_KEYPRESS","SET_IS_LOCKED","SET_BOX_CODE","RESET_INPUT_SEQUENCE","SET_SERVICE_MODE","SET_CONFIRM","handleKeyPress","payload","type","setIsLocked","setBoxCode","resetInputSequence","setServiceMode","setConfirm","isConfirmed","dispatch","key","buttonValue","value","onClick","event","reduxAction","target","handleKeyClick","buttonValues","id","serialNumber","screenMessages","handleKeyboardInput","handlerFunction","map","button","includes","buttons","useEffect","document","addEventListener","removeEventListener","SerialNumber","App","initState","safeBoxCode","isServiceMode","logicReducer","action","screenTypes","SET_SCREEN_ACTIVE","SET_SCREEN_MESSAGE","screenReducer","combineReducers","setScreenActive","setScreenMessage","saveBoxCode","rejectSequence","unlockBox","enterServiceMode","onKeyPress","logicSagas","getConfirm","getIsLocked","getInputSequence","getBoxCode","getIsServiceMode","getIsActive","fetchData","a","fetch","response","json","data","console","log","checkUnlockingSequence","boxCode","isNaN","checkIsSequenceForServiceMode","boxPass","put","delay","select","confirm","call","sn","takeLatest","all","rootSaga","sagaMiddleware","createSagaMiddleware","middlewares","store","createStore","rootReducer","applyMiddleware","run","ReactDOM","render","getElementById"],"mappings":"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","file":"static/js/main.13138a71.chunk.js","sourcesContent":["import React from 'react';\r\nimport './Panel-screen-status.scss';\r\nimport { connect } from 'react-redux';\r\nimport PropTypes from 'prop-types';\r\n\r\nconst PanelScreenStatus = ({ isLocked }) => {\r\n\treturn (\r\n\t\t<span className=\"panel-screen__status\">{ isLocked ? 'Locked' : 'Unlocked' }</span>\r\n\t);\r\n};\r\n\r\nPanelScreenStatus.propTypes = {\r\n\tisLocked: PropTypes.bool.isRequired,\r\n};\r\n\r\nconst mapStateToProps = (state) => {\r\n\treturn {\r\n\t\tisLocked: state.logic.isLocked\r\n\t}; \r\n};\r\n\r\nexport default connect(mapStateToProps)(PanelScreenStatus);","import React from 'react';\r\nimport './Panel-screen-message.scss';\r\nimport { connect } from 'react-redux';\r\nimport PropTypes from 'prop-types';\r\nimport { renderSequence } from './utils';\r\n\r\nconst PanelScreenMessage = ( { inputSequence, message } ) => {\r\n\treturn (\r\n\t\t<span className=\"panel-screen__message\">{ renderSequence(inputSequence) || message }</span>\r\n\t);\r\n};\r\n\r\nPanelScreenMessage.propTypes = {\r\n\tinputSequence: PropTypes.string.isRequired,\r\n\tmessage: PropTypes.string.isRequired,\r\n};\r\n\r\nconst mapStateToProps = (state) => {\r\n\treturn {\r\n\t\tinputSequence: state.logic.inputSequence,\r\n\t\tmessage: state.screen.message,\r\n\t}; \r\n};\r\n\r\nexport default connect(mapStateToProps)(PanelScreenMessage);","export function renderSequence(sequence){\r\n\tif(sequence.length > 10)\r\n\t\treturn sequence.substring(sequence.length-10);\r\n\treturn sequence;\r\n}","import React from 'react';\r\nimport './Panel-screen.scss';\r\nimport PropTypes from 'prop-types';\r\nimport PanelScreenStatus from '../panel-screen-status/Panel-screen-status.component';\r\nimport PanelScreenMessage from '../panel-screen-message/Panel-screen-message.component';\r\nimport { connect } from 'react-redux';\r\n\r\nconst PanelScreen = ({ isActive }) => {\r\n\t\r\n\treturn (\r\n\t\t<section className={`panel-screen ${isActive ? 'panel-screen--light-on' : 'panel-screen--light-off'}`}>\r\n\t\t\t<PanelScreenStatus />\r\n\t\t\t<PanelScreenMessage />\r\n\t\t</section>\r\n\t);\r\n};\r\n\r\nPanelScreen.propTypes = {\r\n\tisActive: PropTypes.bool.isRequired,\r\n};\r\n\r\n\r\nconst mapStateToProps = (state) => {\r\n\treturn {\r\n\t\tisActive: state.screen.isActive,\r\n\t};\r\n};\r\n\r\n\r\nexport default connect(mapStateToProps)(PanelScreen);\r\n","const logicTypes = {\r\n\tHANDLE_KEYPRESS: 'KEYPRESS',\r\n\tSET_IS_LOCKED: 'SET_IS_LOCKED',\r\n\tSET_BOX_CODE: 'SET_BOX_CODE',\r\n\tRESET_INPUT_SEQUENCE: 'RESET_INPUT_SEQUENCE',\r\n\tSET_SERVICE_MODE: 'SET_SERVICE_MODE',\r\n\tSET_CONFIRM: 'SET_CONFIRM',\r\n};\r\n\r\nexport default logicTypes;","import logicTypes from './logicTypes';\r\n\r\nexport const handleKeyPress = (payload) => ({\r\n\ttype: logicTypes.HANDLE_KEYPRESS,\r\n\tpayload\r\n});\r\n\r\nexport const setIsLocked = () => ({\r\n\ttype: logicTypes.SET_IS_LOCKED,\r\n});\r\n\r\nexport const setBoxCode = (payload) => ({\r\n\ttype: logicTypes.SET_BOX_CODE,\r\n\tpayload\r\n});\r\n\r\nexport const resetInputSequence = () => ({\r\n\ttype: logicTypes.RESET_INPUT_SEQUENCE, \r\n});\r\n\r\nexport const setServiceMode = (payload) => ({\r\n\ttype: logicTypes.SET_SERVICE_MODE,\r\n\tpayload\r\n});\r\n\r\nexport const setConfirm = (payload) => ({\r\n\ttype: logicTypes.SET_CONFIRM,\r\n\tpayload\r\n});\r\n\r\n\r\n\r\n","import React from 'react';\r\nimport './Panel-button.scss';\r\nimport PropTypes from 'prop-types';\r\nimport { connect } from 'react-redux';\r\nimport { handleKeyPress } from '../../redux/safeBoxLogic/logicActions';\r\nimport { handleKeyClick } from './utils';\r\n\r\nconst PanelButton = ( { buttonValue, handleKeyPress, isConfirmed } ) => {\r\n\treturn (\r\n\t\t<button className=\"panel-button\" value={buttonValue} onClick={(event) => handleKeyClick(event)(isConfirmed, handleKeyPress)}>{buttonValue}</button>\r\n\t);\r\n};\r\n\r\nPanelButton.propTypes = {\r\n\tbuttonValue: PropTypes.any.isRequired,\r\n\thandleKeyPress: PropTypes.func.isRequired,\r\n\tisConfirmed: PropTypes.bool.isRequired,\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n\treturn {\r\n\t\thandleKeyPress: (key) => dispatch(handleKeyPress(key))\r\n\t};\r\n};\r\n\r\nconst mapStateToProps = (state) => {\r\n\treturn {\r\n\t\tisConfirmed: state.logic.isConfirmed\r\n\t};\r\n};\r\nexport default connect(mapStateToProps, mapDispatchToProps)(PanelButton);","export function handleKeyClick(event){\r\n\treturn (isConfirmed, reduxAction) => {\r\n\t\tif(isConfirmed)\r\n\t\t\treturn;\r\n\t\treduxAction(event.target.value);\r\n\t};\r\n}","export const buttonValues = [{ id: 1, value: '7' }, { id: 2, value: '8' }, { id: 3, value: '9' }, { id: 4, value: '4' }, { id: 5, value: '5' }, { id: 6, value: '6' }, { id: 7, value: '1' }, { id: 8, value: '2' }, \r\n\t{ id: 9, value: '3' }, { id: 10, value: '*' }, { id: 11, value: '0' }, { id: 12, value: 'L' }];\r\n\r\nexport const serialNumber = 4815162342;\r\n\r\nexport const screenMessages = {\r\n\tblank: '', \r\n\tlocking: 'Locking...', \r\n\tunlocking: 'Unlocking...',\r\n\terror: 'Error', \r\n\tready: 'Ready', \r\n\tservice: 'Service', \r\n\tvalidating: 'Validating...', \r\n};","import { buttonValues } from '../../constants';\r\n\r\nexport function handleKeyboardInput(event){\r\n\treturn (isConfirmed, handlerFunction) => {\r\n\t\tif(isConfirmed)\r\n\t\t\treturn;\r\n\t\tconst validKeys = buttonValues.map( button => button.value);\r\n\t\tif(validKeys.includes(event.key))\r\n\t\t\thandlerFunction(event.key);\r\n\t};\r\n   \r\n}","import React, { useEffect } from 'react';\r\nimport PanelButton from '../panel-button/Panel-button.component';\r\nimport './Panel-buttons.scss';\r\nimport { connect } from 'react-redux';\r\nimport { buttonValues } from '../../constants';\r\nimport { handleKeyPress } from '../../redux/safeBoxLogic/logicActions';\r\nimport { PropTypes } from 'prop-types';\r\nimport { handleKeyboardInput } from './utils';\r\n\r\nconst PanelButtons = ({ handleKeyPress, isConfirmed }) => {\r\n\tconst buttons = buttonValues;\r\n\r\n\r\n\t//setting document event listener\r\n\tuseEffect( () => {\r\n\t\tdocument.addEventListener('keypress', (event) => handleKeyboardInput(event)(isConfirmed, handleKeyPress));\r\n\r\n\t\treturn () => document.removeEventListener('keypress', handleKeyboardInput);\r\n\t}, [handleKeyboardInput]);\r\n\r\n\t\r\n\treturn (\r\n\t\t<section className=\"panel-buttons\">\r\n\t\t\t{buttons.map( (button) => {\r\n\t\t\t\treturn <PanelButton buttonValue={button.value} key={button.id}/>;\r\n\t\t\t})}\r\n\t\t</section>\r\n\t);\r\n};\r\n\r\nPanelButtons.propTypes = {\r\n\thandleKeyPress: PropTypes.func.isRequired,\r\n\tisConfirmed: PropTypes.bool.isRequired,\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n\treturn {\r\n\t\thandleKeyPress: (key) => dispatch(handleKeyPress(key))\r\n\t};\r\n};\r\n\r\nconst mapStateToProps = (state) => {\r\n\treturn {\r\n\t\tisConfirmed: state.logic.isConfirmed\r\n\t};\r\n};\r\n\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(PanelButtons);\r\n","import React from 'react';\r\nimport './Serial-number.scss';\r\nimport { serialNumber } from '../../constants';\r\n\r\nconst SerialNumber = () => {\r\n\treturn (\r\n\t\t<div className=\"serial-number\">\r\n            S / N: {serialNumber}\r\n\t\t</div>\r\n\t);\r\n};\r\n\r\nexport default SerialNumber;","import React from 'react';\r\nimport './style/App.scss';\r\nimport PanelScreen from './components/panel-screen/Panel-screen.component';\r\nimport PanelButtons from './components/panel-buttons/Panel-buttons.component';\r\nimport SerialNumber from './components/serial-number/Serial-number.component';\r\n\r\nfunction App() {\r\n\treturn (\r\n\t\t<div className=\"panel\">\r\n\t\t\t<PanelScreen />\r\n\t\t\t<PanelButtons />\r\n\t\t\t<SerialNumber/>\r\n\t\t</div>);\r\n}\r\n\r\nexport default App;\r\n","import logicTypes from './logicTypes';\r\n\r\nconst initState = {\r\n\tinputSequence: '',\r\n\tsafeBoxCode: '',\r\n\tisServiceMode: false,\r\n\tisLocked: false,\r\n\tisConfirmed: false,\r\n};\r\n\r\n\r\nconst logicReducer = (state = initState, action = {}) => {\r\n\tswitch(action.type){\r\n\tcase logicTypes.HANDLE_KEYPRESS:\r\n\t\treturn { ...state, inputSequence: state.inputSequence + action.payload };\r\n\tcase logicTypes.SET_IS_LOCKED:\r\n\t\treturn { ...state, isLocked: !state.isLocked };\r\n\tcase logicTypes.SET_BOX_CODE:\r\n\t\treturn { ...state, safeBoxCode: action.payload };\r\n\tcase logicTypes.RESET_INPUT_SEQUENCE:\r\n\t\treturn { ...state, inputSequence: '' };\r\n\tcase logicTypes.SET_SERVICE_MODE:\r\n\t\treturn { ...state, isServiceMode: action.payload };\r\n\tcase logicTypes.SET_CONFIRM:\r\n\t\treturn { ...state, isConfirmed: action.payload };\r\n\tdefault:\r\n\t\treturn state;\r\n\t}\r\n};\r\n\r\nexport default logicReducer;\r\n","const screenTypes = {\r\n\tSET_SCREEN_ACTIVE: 'SET_SCREEN_ACTIVE',\r\n\tSET_SCREEN_MESSAGE: 'SET_SCREEN_MESSAGE',\r\n};\r\n\r\nexport default screenTypes;","import screenTypes from './screenTypes';\r\n\r\n\r\nconst initState = {\r\n\tmessage: '',\r\n\tisActive: false,\r\n};\r\n\r\n\r\nconst screenReducer = (state = initState, action = {}) => {\r\n\tswitch(action.type){\r\n\tcase screenTypes.SET_SCREEN_ACTIVE:\r\n\t\treturn { ...state, isActive: action.payload };\r\n\tcase screenTypes.SET_SCREEN_MESSAGE:\r\n\t\treturn { ...state, message: action.payload };\r\n\tdefault:\r\n\t\treturn state;\r\n\t}\r\n};\r\n\r\nexport default screenReducer;\r\n","import { combineReducers } from 'redux';\r\n\r\nimport logicReducer from './safeBoxLogic/logicReducer';\r\nimport screenReducer from './screen/screenReducer';\r\n\r\nexport default combineReducers({\r\n\tlogic: logicReducer,\r\n\tscreen: screenReducer\r\n});","import screenTypes from './screenTypes';\r\n\r\n\r\nexport const  setScreenActive = (payload) => ({\r\n\ttype: screenTypes.SET_SCREEN_ACTIVE,\r\n\tpayload\r\n});\r\n\r\n\r\nexport const setScreenMessage = (payload) => ({\r\n\ttype: screenTypes.SET_SCREEN_MESSAGE,\r\n\tpayload\r\n});\r\n\r\n","import { takeLatest, delay, all, put, call, select } from 'redux-saga/effects';\r\nimport logicTypes from './logicTypes';\r\nimport { setConfirm, setBoxCode, resetInputSequence, setIsLocked, setServiceMode } from './logicActions';\r\nimport { setScreenMessage, setScreenActive } from '../screen/screenActions';\r\nexport const getConfirm = (state) => state.logic.isConfirmed;\r\nexport const getIsLocked = (state) => state.logic.isLocked;\r\nexport const getInputSequence = (state) => state.logic.inputSequence;\r\nexport const getBoxCode = (state) => state.logic.safeBoxCode;\r\nexport const getIsServiceMode = (state) => state.logic.isServiceMode;\r\nexport const getKey = (state) => state.logic.key;\r\nexport const getIsActive = (state) => state.screen.isActive;\r\nimport { screenMessages, serialNumber } from '../../constants';\r\n\r\nconst fetchData = async (inputSequence) => {\r\n\ttry{\r\n\t\tconst response =  await\tfetch(`https://9w4qucosgf.execute-api.eu-central-1.amazonaws.com/default/CR-JS_team_M02a?c\r\n\t\tode=${inputSequence}`\r\n\t\t);\r\n\t\tconst data = await response.json();\r\n\t\treturn data;\r\n\t}\r\n\tcatch (e) {\r\n\t\tconsole.log(e);\r\n\t}\r\n};\r\n\r\nfunction checkLockingSequence(sequence){\r\n\treturn !!(sequence[sequence.length - 1] === 'L' && sequence.length === 7 &&  !isNaN(+sequence.substring(0, 6)));\r\n}\r\n\r\nfunction checkUnlockingSequence(sequence, boxCode, isServiceMode){\r\n\treturn !!(sequence.length === 6 && !isNaN(+sequence.substring(0, 6)) && sequence === boxCode && !isServiceMode);\r\n}\r\n\r\nfunction checkIsSequenceForServiceMode(inputSequence, boxCode){\r\n\treturn !!(inputSequence !== boxCode && inputSequence === '000000');\r\n}\r\n\r\n\r\nfunction* saveBoxCode(inputSequence){\r\n\tconst boxPass = inputSequence.substring(0, 6);\r\n\tyield put(setBoxCode(boxPass));\r\n\tyield put(resetInputSequence());\r\n\tyield put(setScreenMessage(screenMessages.locking));\r\n\tyield delay(3000);\r\n\tyield put(setIsLocked());\r\n\tyield put(setScreenMessage(screenMessages.ready));\r\n\tyield delay(200);\r\n\tyield put(setConfirm(false));\r\n\tyield put(setScreenMessage(screenMessages.blank));\r\n\tyield delay(5000);\r\n\tyield put(setScreenActive(false));\r\n}\r\n\r\nfunction* rejectSequence(){\r\n\tyield put(resetInputSequence());\r\n\tyield put(setScreenMessage(screenMessages.error));\r\n\tyield delay(1000);\r\n\tyield put(setScreenMessage(screenMessages.blank));\r\n\tyield put(setConfirm(false));\r\n\tyield delay(5000);\r\n\tyield put(setScreenActive(false));\r\n}\r\n\r\nfunction* unlockBox(){\r\n\tyield put(resetInputSequence());\r\n\tyield put(setScreenMessage(screenMessages.unlocking));\r\n\tyield delay(3000);\r\n\tyield put(setBoxCode(''));\r\n\tyield put(setIsLocked());\r\n\tyield put(setScreenMessage(screenMessages.ready));\r\n\tyield delay(200);\r\n\tyield put(setScreenMessage(screenMessages.blank));\r\n\tyield put(setConfirm(false));\r\n\tyield delay(5000);\r\n\tyield put(setScreenActive(false));\r\n}\r\n\r\nfunction* enterServiceMode(){\r\n\tyield put(resetInputSequence());\r\n\tyield put(setServiceMode(true));\r\n\tyield put(setScreenMessage(screenMessages.service));\r\n\tyield delay(700);\r\n\tyield put(setScreenMessage(screenMessages.blank));\r\n\tyield put(setConfirm(false));\r\n\tyield delay(5000);\r\n\tyield put(setScreenActive(false));\r\n}\r\n\r\n\r\nexport function* onKeyPress({ payload }){\r\n\tlet confirm = yield select(getConfirm);\r\n\tlet isLocked = yield select(getIsLocked);\r\n\tlet inputSequence = yield select(getInputSequence);\r\n\tlet boxCode = yield select(getBoxCode);\r\n\tlet isServiceMode = yield select(getIsServiceMode);\r\n\tlet isActive = yield select(getIsActive);\r\n\tif(!isActive)\r\n\t\tyield put(setScreenActive(true));\r\n    \r\n\tif(!isLocked && payload ==='L'){\r\n\t\tyield put(setConfirm(true));\r\n\t}\t\r\n\tyield delay(1200);\r\n\tif(!confirm)\r\n\t\tyield put(setConfirm(true));\r\n\tif(!isLocked){\r\n\t\tif(checkLockingSequence(inputSequence))\r\n\t\t\tyield saveBoxCode(inputSequence);\r\n\t\telse\r\n\t\t\tyield rejectSequence();\r\n\t}\r\n\telse {\r\n\t\tif(checkUnlockingSequence(inputSequence, boxCode, isServiceMode)){\r\n\t\t\tyield unlockBox();\r\n\t\t}\r\n\t\telse if(isServiceMode){\r\n\t\t\tyield put(setScreenMessage(screenMessages.validating));\r\n\t\t\tyield put(resetInputSequence());\r\n\t\t\tconst data = yield call(() => fetchData(inputSequence));\r\n\t\t\tif(data.sn === serialNumber){\r\n\t\t\t\tyield put(setServiceMode(false));\r\n\t\t\t\tyield unlockBox();\r\n\t\t\t}\r\n\t\t\telse{\r\n\t\t\t\tyield put(setServiceMode(false));\r\n\t\t\t\tyield rejectSequence();\r\n\t\t\t}\t\t\r\n\t\t}\r\n\t\telse if(checkIsSequenceForServiceMode(inputSequence, boxCode)){\r\n\t\t\tyield enterServiceMode();\r\n\t\t}\r\n\t\telse{\r\n\t\t\tyield rejectSequence();\r\n\t\t}\r\n\t}\r\n}\r\n\r\n\t\r\n\r\n\r\n\r\n\r\nexport function* handleKeyClick(){\r\n\tyield takeLatest(logicTypes.HANDLE_KEYPRESS, onKeyPress);\r\n}\r\n\r\nexport default function* logicSagas(){\r\n\tyield (all([call(handleKeyClick)]));\r\n}","import { all, call } from 'redux-saga/effects';\r\nimport logicSagas from './safeBoxLogic/logicSagas';\r\n\r\n\r\nexport default function* rootSaga(){\r\n\tyield all([\r\n\t\tcall(logicSagas),\r\n\t]);\r\n}","import { createStore, applyMiddleware } from 'redux';\r\nimport logger from 'redux-logger';\r\nimport rootReducer from './rootReducer';\r\nimport createSagaMiddleware from 'redux-saga';\r\nimport rootSaga from './rootSaga';\r\nconst sagaMiddleware = createSagaMiddleware();\r\nconst middlewares = [sagaMiddleware];\r\n\r\nif(process.env.NODE_ENV === 'development'){\r\n\tmiddlewares.push(logger);\r\n}\r\n\r\n\r\nconst store = createStore(rootReducer, applyMiddleware(...middlewares));\r\n\r\nsagaMiddleware.run(rootSaga);\r\n\r\nexport default store;","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './style/index.scss';\r\nimport App from './App';\r\nimport store from './redux/store';\r\nimport { Provider } from 'react-redux';\r\n\r\nReactDOM.render(\r\n\t<Provider store={store}>\r\n\t\t<App />\r\n\t</Provider>,\r\n\tdocument.getElementById('root')\r\n);\r\n\r\n"],"sourceRoot":""}