{"version":3,"sources":["redux/types.js","redux/actions.js","constants.js","components/panel-screen/Panel-screen.component.js","components/panel-screen/Panel-screen.container.js","components/panel-button/Panel-button.component.js","components/panel-buttons/Panel-buttons.component.js","components/serial-number/Serial-number.component.js","App.js","redux/reducer.js","redux/store.js","index.js"],"names":["actionTypes","HANDLE_KEYPRESS","SET_SCREEN_ACTIVE","SET_SCREEN_MESSAGE","SET_IS_LOCKED","SET_BOX_CODE","RESET_INPUT_SEQUENCE","SET_SERVICE_MODE","handleKeyPress","payload","type","setScreenMessage","resetInputSequence","setServiceMode","buttonValues","serialNumber","screenMessages","PanelScreen","inputSequence","isLocked","isActive","screenMessage","renderSequence","className","connect","state","boxCode","code","isServiceMode","dispatch","msg","setIsLocked","setBoxCode","setScreenActive","serviceModeProcess","sn","unlockBox","rejectSequence","rejectInputSequence","fetch","then","response","json","setTimeout","React","useEffect","timeoutId","sequence","length","isNaN","substring","checkUnlockingSequence","boxPass","saveBoxCode","clearTimeout","activeId","key","buttonValue","value","onClick","event","includes","target","buttons","handleKeyboardInput","document","addEventListener","removeEventListener","map","index","SerialNumber","App","initState","mainReducer","action","middlewares","thunkMiddleware","store","createStore","applyMiddleware","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.b1edaaa1.chunk.js","sourcesContent":["const actionTypes = {\r\n\tHANDLE_KEYPRESS: 'KEYPRESS',\r\n\tSET_SCREEN_ACTIVE: 'SET_SCREEN_ACTIVE',\r\n\tSET_SCREEN_MESSAGE: 'SET_SCREEN_MESSAGE',\r\n\tSET_IS_LOCKED: 'SET_IS_LOCKED',\r\n\tSET_BOX_CODE: 'SET_BOX_CODE',\r\n\tRESET_INPUT_SEQUENCE: 'RESET_INPUT_SEQUENCE',\r\n\tSET_SERVICE_MODE: 'SET_SERVICE_MODE',\r\n};\r\n\r\nexport default actionTypes;","import actionTypes from './types';\r\n\r\nexport const handleKeyPress = (payload) => ({\r\n\ttype: actionTypes.HANDLE_KEYPRESS,\r\n\tpayload\r\n});\r\n\r\nexport const  setScreenActive = (payload) => ({\r\n\ttype: actionTypes.SET_SCREEN_ACTIVE,\r\n\tpayload\r\n});\r\n\r\n\r\nexport const setScreenMessage = (payload) => ({\r\n\ttype: actionTypes.SET_SCREEN_MESSAGE,\r\n\tpayload\r\n});\r\n\r\nexport const setIsLocked = () => ({\r\n\ttype: actionTypes.SET_IS_LOCKED,\r\n});\r\n\r\nexport const setBoxCode = (payload) => ({\r\n\ttype: actionTypes.SET_BOX_CODE,\r\n\tpayload\r\n});\r\n\r\nexport const resetInputSequence = () => ({\r\n\ttype: actionTypes.RESET_INPUT_SEQUENCE, \r\n});\r\n\r\nexport const setServiceMode = (payload) => ({\r\n\ttype: actionTypes.SET_SERVICE_MODE,\r\n\tpayload\r\n});\r\n\r\n\r\n//Processing serviceMode sequence\r\nexport const serviceModeProcess = (inputSequence, serialNumber, unlockBox, rejectInputSequence) => (dispatch)=>{\r\n\tdispatch(resetInputSequence());\r\n\tdispatch(setScreenMessage('Validating...'));\r\n\r\n\t\r\n\tfetch(`https://9w4qucosgf.execute-api.eu-central-1.amazonaws.com/default/CR-JS_team_M02a?c\r\n\t\tode=${inputSequence}`\r\n\t)\r\n\t\t.then(response=>response.json())\r\n\t\t.then(response=>{\r\n\t\t\tif(response.sn === serialNumber)\r\n\t\t\t\tunlockBox();\r\n\t\t\telse\r\n\t\t\t\trejectInputSequence();\r\n\t\t\tdispatch(setServiceMode(false));\r\n\t\t});\r\n\r\n\t\r\n};","export const buttonValues = [7, 8, 9, 4, 5, 6, 1, 2, 3, '*', 0, 'L'];\r\n\r\nexport const serialNumber = 4815162342;\r\n\r\nexport const screenMessages = {\r\n\tblank: '', \r\n\tlocking: 'Locking...', \r\n\tunlocking: 'Unlocking...',\r\n\terror: 'Error', \r\n\tready: 'Ready', \r\n\tservice: 'Service', \r\n\tvalidating: 'Validating', \r\n};","import React from 'react';\r\nimport './Panel-screen.scss';\r\nimport PropTypes from 'prop-types';\r\n\r\n\r\nconst PanelScreen = ({ \tinputSequence, isLocked, isActive, screenMessage, renderSequence }) => {\r\n\t\r\n\treturn (\r\n\t\t<section className={`panel-screen ${isActive ? 'panel-screen--light-on' : 'panel-screen--light-off'}`}>\r\n\t\t\t<span className=\"panel-screen__status\">{ isLocked ? 'Locked' : 'Unlocked' }</span>\r\n\t\t\t<span className=\"panel-screen__message\">{ renderSequence(inputSequence) || screenMessage }</span>\r\n\t\t</section>\r\n\t);\r\n};\r\n\r\nPanelScreen.propTypes = {\r\n\tscreenMessage: PropTypes.string.isRequired,\r\n\tinputSequence: PropTypes.string.isRequired,\r\n\tisLocked: PropTypes.bool.isRequired,\r\n\tisActive: PropTypes.bool.isRequired,\r\n\trenderSequence: PropTypes.func.isRequired,\r\n};\r\n\r\n\r\nexport default PanelScreen;\r\n","import React from 'react';\r\nimport './Panel-screen.scss';\r\nimport { connect } from 'react-redux';\r\nimport PropTypes from 'prop-types';\r\nimport { setScreenMessage, resetInputSequence, setIsLocked, setBoxCode, setScreenActive, setServiceMode, serviceModeProcess } from '../../redux/actions';\r\nimport { screenMessages, serialNumber } from '../../constants';\r\nimport PanelScreen from './Panel-screen.component';\r\n\r\nconst PanelScreenContainer = ({ \r\n\tscreenMessage, \r\n\tinputSequence, \r\n\tisLocked, \r\n\tsetScreenMessage, \r\n\tresetInputSequence, \r\n\tsetIsLocked, \r\n\tsetBoxCode, \r\n\tboxCode, \r\n\tsetScreenActive, \r\n\tisActive, \r\n\tsetServiceMode, \r\n\tserviceModeProcess,\r\n\tisServiceMode, \r\n}) => {\r\n\t\r\n\t//checking locking sequence (locking sequence should contain 6 digits and 7th character 'L')\r\n\tfunction checkLockingSequence(sequence){\r\n\t\tif(sequence[sequence.length - 1] === 'L' && sequence.length === 7 &&  !isNaN(+sequence.substring(0, 6)))\r\n\t\t\treturn true;\r\n\t\treturn false;\r\n\t}\r\n\r\n\t//checking unlocking sequence (unlocking sequence should contain 6 digits)\r\n\tfunction checkUnlockingSequence(sequence, boxCode){\r\n\t\tif(sequence.length === 6 && !isNaN(+sequence.substring(0, 6)) && sequence === boxCode && !isServiceMode)\r\n\t\t\treturn true;\r\n\t\treturn false;\r\n\t}\r\n\r\n\t//save boxcode, change lock status and update screen messages\r\n\tfunction saveBoxCode(){\r\n\t\tconst boxPass = inputSequence.substring(0, 6);\r\n\t\tsetBoxCode(boxPass);\r\n\t\tresetInputSequence();\r\n\t\tsetScreenMessage(screenMessages.locking);\r\n\t\tsetTimeout(() => {\r\n\t\t\tsetIsLocked();\r\n\t\t\tsetScreenMessage(screenMessages.ready);\r\n\t\t\tsetTimeout( () => {\r\n\t\t\t\tsetScreenMessage(screenMessages.blank);\r\n\t\t\t}, 500);\r\n\t\t}, 3000);\r\n\t}\r\n\r\n\t//unlock box, change islocked, message and box code state \r\n\tfunction unlockBox(){\r\n\t\tresetInputSequence();\r\n\t\tsetScreenMessage(screenMessages.unlocking);\r\n\t\tsetTimeout(() => {\r\n\t\t\tsetBoxCode('');\r\n\t\t\tsetIsLocked();\r\n\t\t\tsetScreenMessage(screenMessages.ready);\r\n\t\t\tsetTimeout( () => {\r\n\t\t\t\tsetScreenMessage(screenMessages.blank);\r\n\t\t\t}, 500);\r\n\t\t}, 3000);\r\n\t}\r\n\r\n\t//reject input sequence for locking/unlocking and show error on the screen\r\n\tfunction rejectSequence(){\r\n\t\tresetInputSequence();\r\n\t\tsetScreenMessage(screenMessages.error);\r\n\t\tsetTimeout( () => {setScreenMessage(screenMessages.blank);}, 1000);\r\n\t}\r\n\t//check if sequence is for entering service mode\r\n\tfunction checkIsSequenceForServiceMode(){\r\n\t\tif(inputSequence !== boxCode && inputSequence === '000000')\r\n\t\t\treturn true; \r\n\t\treturn false;\r\n\t}\r\n\r\n\tfunction enterServiceMode(){\r\n\t\tresetInputSequence();\r\n\t\tsetServiceMode(true);\r\n\t\tsetScreenMessage(screenMessages.service);\r\n\t\tsetTimeout(() => {\r\n\t\t\tsetTimeout( () => {\r\n\t\t\t\tsetScreenMessage(screenMessages.blank);\r\n\t\t\t}, 500);\r\n\t\t}, 700);\r\n\t}\r\n    \r\n\t//render last 10digit if code is longer than 10 characters, if sequence is for locking dont show character L on the end\r\n\tfunction renderSequence(sequence){\r\n\t\tif(!sequence.length)\r\n\t\t\treturn '';\r\n\t\tif(sequence.length > 10){\r\n\t\t\tsequence = sequence.substring(sequence.length-10);\r\n\t\t}\r\n\t\tif(sequence[sequence.length - 1] === 'L' && !isLocked){\r\n\t\t\treturn sequence.substring(0, sequence.length - 1);\r\n\t\t}\r\n\t\treturn sequence;\r\n\t}\r\n\r\n\t\r\n\t//if there is input sequence and sequence doesnt change for 1.2 s, code will be proccesed for unlocking/locking\r\n\tReact.useEffect( () => {\r\n\t\tif(inputSequence && !isActive)\r\n\t\t\tsetScreenActive(true);\r\n\r\n\t\tconst timeoutId = setTimeout( () => {\r\n\t\t\tif(inputSequence){\r\n\t\t\t\tif(!isLocked){\r\n\t\t\t\t\tif(checkLockingSequence(inputSequence)){\r\n\t\t\t\t\t\tsaveBoxCode();\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse{\r\n\t\t\t\t\t\trejectSequence();\r\n\t\t\t\t\t}\r\n\t\t\t\t} else {\r\n\t\t\t\t\tif(checkUnlockingSequence(inputSequence, boxCode)){\r\n\t\t\t\t\t\tunlockBox();\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse if(isServiceMode){\r\n\t\t\t\t\t\tserviceModeProcess(inputSequence, serialNumber, unlockBox, rejectSequence);\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse if(checkIsSequenceForServiceMode()){\r\n\t\t\t\t\t\tenterServiceMode();\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse{\r\n\t\t\t\t\t\trejectSequence();\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}, 1200);\r\n\r\n\t\treturn () => {\r\n\t\t\tclearTimeout(timeoutId);\r\n\t\t};\r\n\r\n\t}, [inputSequence]);\r\n\r\n\r\n\t//disabling screen light if system is inactive for 5s\r\n\tReact.useEffect( () => {\r\n\t\tconst activeId = setTimeout( () => {\r\n\t\t\tif(isActive)\r\n\t\t\t\tsetScreenActive(false);\r\n\t\t}, 5000);\r\n\r\n\t\treturn () => clearTimeout(activeId);\r\n\t}, [isLocked, isActive, inputSequence, screenMessage]);\r\n\r\n\r\n\treturn (\r\n\t\t<PanelScreen isActive={isActive} isLocked={isLocked} inputSequence={inputSequence} screenMessage={screenMessage} renderSequence={renderSequence}/>\r\n\t);\r\n};\r\n\r\nPanelScreenContainer.propTypes = {\r\n\tscreenMessage: PropTypes.string.isRequired,\r\n\tinputSequence: PropTypes.string.isRequired,\r\n\tisLocked: PropTypes.bool.isRequired,\r\n\tsetScreenMessage: PropTypes.func.isRequired,\r\n\tresetInputSequence: PropTypes.func.isRequired,\r\n\tsetIsLocked: PropTypes.func.isRequired,\r\n\tsetBoxCode: PropTypes.func.isRequired,\r\n\tboxCode: PropTypes.string.isRequired,\r\n\tisActive: PropTypes.bool.isRequired,\r\n\tsetScreenActive: PropTypes.func.isRequired,\r\n\tsetServiceMode: PropTypes.func.isRequired,\r\n\tserviceModeProcess: PropTypes.func.isRequired,\r\n\tisServiceMode: PropTypes.bool.isRequired,\r\n};\r\n\r\n\r\nconst mapStateToProps = (state) => {\r\n\treturn {\r\n\t\tscreenMessage: state.screenMessage,\r\n\t\tinputSequence: state.inputSequence,\r\n\t\tisLocked: state.isLocked,\r\n\t\tboxCode: state.code,\r\n\t\tisActive: state.isActive,\r\n\t\tisServiceMode: state.isServiceMode\r\n\t};\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n\treturn {\r\n\t\tsetScreenMessage: (msg) => dispatch(setScreenMessage(msg)),\r\n\t\tresetInputSequence: () => dispatch(resetInputSequence()),\r\n\t\tsetIsLocked: () => dispatch(setIsLocked()),\r\n\t\tsetBoxCode: (code) => dispatch(setBoxCode(code)),\r\n\t\tsetScreenActive: (payload) => dispatch(setScreenActive(payload)),\r\n\t\tsetServiceMode: (payload) => dispatch(setServiceMode(payload)), \r\n\t\tserviceModeProcess: (inputSequence, sn, unlockBox, rejectSequence) => dispatch(serviceModeProcess(inputSequence, sn, unlockBox, rejectSequence)),\r\n\t};\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(PanelScreenContainer);\r\n","import React from 'react';\r\nimport './Panel-button.scss';\r\nimport PropTypes from 'prop-types';\r\nimport { connect } from 'react-redux';\r\nimport { handleKeyPress } from '../../redux/actions';\r\n\r\nconst PanelButton = ( { buttonValue, handleKeyPress, screenMessage, isLocked, inputSequence } ) => {\r\n\t\r\n\tfunction handleKeyClick(event){\r\n\t\tif(screenMessage || !isLocked && inputSequence.includes('L'))\r\n\t\t\treturn;\r\n\t\thandleKeyPress(event.target.value);\r\n\t}\r\n\r\n\treturn (\r\n\t\t<button className=\"panel-button\" value={buttonValue} onClick={handleKeyClick}>{buttonValue}</button>\r\n\t);\r\n};\r\n\r\nPanelButton.propTypes = {\r\n\tbuttonValue: PropTypes.any.isRequired,\r\n\thandleKeyPress: PropTypes.func.isRequired,\r\n\tscreenMessage: PropTypes.string.isRequired,\r\n\tisLocked: PropTypes.bool.isRequired,\r\n\tinputSequence: PropTypes.string.isRequired,\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n\treturn {\r\n\t\thandleKeyPress: (key) => dispatch(handleKeyPress(key))\r\n\t};\r\n};\r\n\r\nconst mapStateToProps = (state) => {\r\n\treturn {\r\n\t\tscreenMessage: state.screenMessage,\r\n\t\tisLocked: state.isLocked,\r\n\t\tinputSequence: state.inputSequence,\r\n\t};\r\n};\r\n\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(PanelButton);","import React from 'react';\r\nimport PanelButton from '../panel-button/Panel-button.component';\r\nimport './Panel-buttons.scss';\r\nimport { connect } from 'react-redux';\r\nimport { buttonValues } from '../../constants';\r\nimport { handleKeyPress } from '../../redux/actions';\r\nimport { PropTypes } from 'prop-types';\r\n\r\nconst PanelButtons = ({ handleKeyPress, screenMessage, isLocked, inputSequence }) => {\r\n\tconst buttons = buttonValues;\r\n\t//Helper function for handling keyboard inputs\r\n\tfunction handleKeyboardInput(event){\r\n\t\tif(screenMessage || (!isLocked && inputSequence.includes('L'))){\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tconst validKeys = ['0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'L', '*'];\r\n\t\tif(validKeys.includes(event.key))\r\n\t\t\thandleKeyPress(event.key);\r\n\t}\r\n\r\n\t//setting document event listener\r\n\tReact.useEffect( () => {\r\n\t\tdocument.addEventListener('keypress', handleKeyboardInput);\r\n\r\n\t\treturn () => document.removeEventListener('keypress', handleKeyboardInput);\r\n\t}, [screenMessage, inputSequence]);\r\n\r\n\t\r\n\treturn (\r\n\t\t<section className=\"panel-buttons\">\r\n\t\t\t{buttons.map( (value, index) => {\r\n\t\t\t\treturn <PanelButton buttonValue={value} key={index}/>;\r\n\t\t\t})}\r\n\t\t</section>\r\n\t);\r\n};\r\n\r\nPanelButtons.propTypes = {\r\n\thandleKeyPress: PropTypes.func.isRequired,\r\n\tscreenMessage: PropTypes.string.isRequired,\r\n\tisLocked: PropTypes.bool.isRequired,\r\n\tinputSequence: PropTypes.string.isRequired,\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n\treturn {\r\n\t\thandleKeyPress: (key) => dispatch(handleKeyPress(key))\r\n\t};\r\n};\r\n\r\nconst mapStateToProps = (state) => {\r\n\treturn {\r\n\t\tscreenMessage: state.screenMessage,\r\n\t\tinputSequence: state.inputSequence,\r\n\t\tisLocked: state.isLocked,\r\n\t};\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(PanelButtons);\r\n","import React from 'react';\r\nimport './Serial-number.scss';\r\nimport { serialNumber } from '../../constants';\r\n\r\nconst SerialNumber = () => {\r\n\treturn (\r\n\t\t<div className=\"serial-number\">\r\n            S / N: {serialNumber}\r\n\t\t</div>\r\n\t);\r\n};\r\n\r\nexport default SerialNumber;","import React from 'react';\nimport './App.scss';\nimport PanelScreenContainer from './components/panel-screen/Panel-screen.container';\nimport PanelButtons from './components/panel-buttons/Panel-buttons.component';\nimport SerialNumber from './components/serial-number/Serial-number.component';\n\nfunction App() {\n\n\n\treturn (\n\t\t<div className=\"panel\">\n\t\t\t<PanelScreenContainer />\n\t\t\t<PanelButtons />\n\t\t\t<SerialNumber/>\n\t\t</div>);\n}\n\nexport default App;\n","import actionTypes from './types';\r\n\r\nconst initState = {\r\n\tisLocked: false,\r\n\tscreenMessage: '',\r\n\tisActive: false,\r\n\tcode: '',\r\n\tinputSequence: '',\r\n\tisServiceMode: false,\r\n};\r\n\r\nconst mainReducer = (state = initState, action = {}) => {\r\n\tswitch(action.type){\r\n\tcase actionTypes.HANDLE_KEYPRESS:\r\n\t\treturn { ...state, inputSequence: state.inputSequence + action.payload };\r\n\tcase actionTypes.SET_SCREEN_ACTIVE:\r\n\t\treturn { ...state, isActive: action.payload };\r\n\tcase actionTypes.SET_SCREEN_MESSAGE:\r\n\t\treturn { ...state, screenMessage: action.payload };\r\n\tcase actionTypes.SET_IS_LOCKED:\r\n\t\treturn { ...state, isLocked: !state.isLocked };\r\n\tcase actionTypes.SET_BOX_CODE:\r\n\t\treturn { ...state, code: action.payload };\r\n\tcase actionTypes.RESET_INPUT_SEQUENCE:\r\n\t\treturn { ...state, inputSequence: '' };\r\n\tcase actionTypes.SET_SERVICE_MODE:\r\n\t\treturn { ...state, isServiceMode: action.payload };\r\n\tdefault:\r\n\t\treturn state;\r\n\t}\r\n};\r\n\r\nexport default mainReducer;\r\n","import { createStore, applyMiddleware } from 'redux';\r\nimport logger from 'redux-logger';\r\nimport thunkMiddleware from 'redux-thunk';\r\nimport mainReducer from './reducer';\r\n\r\nconst middlewares = [thunkMiddleware];\r\n\r\nif(process.env.NODE_ENV === 'development'){\r\n\tmiddlewares.push(logger);\r\n}\r\n\r\n\r\nconst store = createStore(mainReducer, applyMiddleware(...middlewares));\r\n\r\nexport default store;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './App';\nimport store from './redux/store';\nimport { Provider } from 'react-redux';\n\nReactDOM.render(\n\t<React.StrictMode>\n\t\t<Provider store={store}>\n\t\t\t<App />\n\t\t</Provider>\n\t</React.StrictMode>,\n\tdocument.getElementById('root')\n);\n\n"],"sourceRoot":""}